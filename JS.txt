[ 자바스크립트 ]
    HTML  : 하이퍼텍스트 마크업 언어      : 웹문서 프레임
    CSS   : 캐스케이드 스타일 시트 언어   : 웹문서 디자인
    JS    : 자바 스크립트                 : 웹문서 동적 *프로그래밍
           -HTML 안에 CSS와 JS 포함
    1. 사용처 : 웹프로그래밍, 서버 개발, 소프트웨어 개발(C언어가 더 많이 사용됨)
    2. 라이브러리 종류
        1) REACT(가장 많음), ANGULAR(서비스 종료), VUE, JQUERY
        2) NODE.JS : 2009년 이후 백엔드 역할  
        3) REACT NATIVE : 앱( 지원중단 )
        4) REACT NATIVE WEB : 웹+앱 
        ---> REACT.JS + NEXT.JS + SPRING (트렌디 프론트엔드 스택)
        5) NW.JS : 소프트웨어 ( 거의 안 씀 )
    3. 사용법
       ※ 하나의 HTML에 여러개 스크립트 사용 가능
        바디 끝나는 지점 앞에 스크립트 삽입 <script> </script>
        <script src="외부스크립트파일경로"></script>
        - 주의할점 : HTML 없이 JS 파일만으로 실행 불가능.
        (방법1) : 
            1. HTML 파일 내 <body> 마크업 안에서 가장 아래
            2. <script> 마크업을 이용하여 JS코드를 작성한다.
        *(방법2)* :
            1. JS 파일 생성하여 JS코드를 작성한다.
            2. HTML 파일 내 <body> 마크업 안에서 가장 아래
            3. <script src="JS파일경로"></script>
    4. 주석
        - HTML  : <!-- 주석내용 -->
        - CSS   : /* 주석내용 */
        - JS    : 
            1. /* 여러줄 주석내용 */ 
            2. // 한줄 주석내용

[ JS 실행 확인 ]
    - 브라우저(크롬)에서 F12 (개발자도구)
        -> source 탭에서 .js 파일 여부 확인
        -> console 탭에서 .js 출력 메시지 확인

[ 기본 필수 용어 ]
    1. 데이터 ( Data / 자료 ) : 사실이나 값을 그대로 나타낸 객관적 자료
        -> 예] (사람) 나이, 키, 시력, 이름 등 (제품) 가격, 제품명 등

    2. *리터럴( Literal ) : 프로그래밍 언어(JS/JAVA/PY/C)에서 소스코드(작성한 코드)에 직접 표현한 값
        -> 컴퓨터는 이진법을 쓰기에, 프로그래밍언어 회사들은 0과 1로 조합한 미리 만들어진 단어가 필요하다.
        -> JS는 'a'를 모르기에 개발자가 사용할 수 있도록 정해진 값을 넣어주는 것.( 상수 = 수정 불가한 고정값 )
        -> 종류 : 9(숫자), a(문자), true(참) < 자료의 타입/종류 >

    3. 자료형 : 프로그래밍언어에서 자료들을 분류하는 방법
        -> 왜? 데이터를 처리하는데 효율적으로 하기 위함 : <분리수거>
        -> 각 프로그래밍언어 별로 다르다.

[ JS 자료형 ]
    1. 숫자형( Number )         : 10(정수), 3.14 (실수)
    2. 문자열 ( String )        : "" 또는 ''로 감싼 자료 / 사과 vs "사과"
                                                       console vs "console" ( 콘솔은 정해진 문자열이라 괜찮다 )
    3. 불리언 ( Boolean )       : true 또는 false *소문자만 가능
    4. 배열 ( Array )           : [ 자료, 자료, 자료 ] 대괄호 안에 쉼표 구분하여 여러 자료들을 감싼 자료 
    5. 객체 ( Object )          : { 속성명 : 자료, 속성명 : 자료 } 중괄호 안에 쉼표 구분하여 이름과 값이 한 쌍을 이루는 자료
    6. 특수 : 
        undefined               : 자료가 할당되지 않은 상태
        null                    : 자료가 존재하지 않음

* 생각해보기 1
    [ 10 , 'A' , "사과" , 3.14 ]
    1. 위 코드에서 자료는 몇 개? / 5개 (배열까지 자료)

* 생각해보기 2
    [ { 이름 : "김현수" } , 'A', 3.14 ]
    1. 위 코드의 자료는 몇 개? / 5개 ( "김현수", {}, 'A', 3.14, [])
    2. 위 코드의 리터럴은 몇 개? 3개 ( "김현수" , 'A', 3.14 )

** 미리 정해진 기능이 포함된 특수문자/문자열 : 키워드
    [] , {} , console , Number, String , if , for 등

[ 변수와 상수 ] : 하나의 자료를 저장하는 메모리 공간
    1. 변수
        let 변수명 = 자료;
    2. 상수
        const 변수명 = 자료;

[ 출력함수 ]
    1. console.log( 출력할 자료 또는 변수명 )   : 브라우저 개발자도구 console탭 출력
    2. alert ( 출력할 자료 또는 변수명 )        : 브라우저의 알림창 출력

[ 입력함수 ]
    1. confirm( "메시지" )                      : [확인][취소] 알림창, true 또는 false 반환
        let 변수명 = confirm();
    2. prompt( "메시지" )                       : 텍스트 입력창, 입력받은 텍스트 반환
        let 변수명 = prompt();

JS 자료형은 미리 결정하지 않고 코드 실행 동안 결정되기에, 동적 타입 언어이다.
강력한 자료형 체크는 '타입스크립트'와 자바, C+에서 가능하다. 오류를 막을 수 있음.
자바스크립트, 파이썬에서는 느슨한 자료형 체크를 한다. 편하지만 일관성있는 변수 유지가 어렵다.

[ 문자열 : 템플릿 리터럴 ] : 문자열 과 변수또는식 연결하는 표현 
    방법1) "문자열" + 변수명 + "문자열"
    *방법2*) `문자열 ${ 변수명 } 문자열`
[ 문자열 : 이스케이프 문자 ] : \백슬래시 이용한 특수 기호 
    \\ : 백슬래시 출력 
    \' : 작은따옴표 출력 
    \" : 큰따롬표 출력 
    \n : 줄바꿈 처리 
    \t : 탭(들여쓰기) 처리 

[ 배열 ]
    1. 여러 자료들을 순서대로 저장하는 *자료* 
    2. 인덱스 : 배열내 저장된 자료들의 순서번호 , *0번시작된다*
    3. 사용법
        (1) 선언 : let/const 변수명 = [ 자료 , 자료 , 자료 ]
        (2) 호출 : 변수명 or 변수명[인덱스]
        (3) 수정 : 변수명 = [ 새로운배열 ] or 변수명[인덱스] = 새로운값 
        (4) 배열내 자료 총개수 : 변수명.length

[ 배열 : 자주 되는 함수]
    1. 변수명.push( 새로운값 )              : 배열내 새로운 요소 추가 
    2. 변수명.splice( 인덱스 , 개수 )       : 배열내 지정한 인덱스부터 개수 요소 삭제 
    3. 변수명.indexOf( 찾을값 )             : 배열내 '찾을값' 존재하는 인덱스 번호 반환 , 없으면 -1 반환 

[ 자료형 형변환 ]
    1. 자동 타입변환 
        (1) "문자열" * 1        : "문자열"          -> 숫자형 변환 
        (2) "문자열" + 숫자형   : "문자열"+숫자형    -> 문자열 변환 
    2. 수동 타입변환 
        (1) Number( )           : 문자열 -> 숫자형 
        (2) parseInt( )         : 문자열 -> 숫자형(정수)
        (3) parseFloat( )       : 문자열 -> 숫자형(실수)
        (4) String( )           : 그외타입 -> 문자열
        (5) Boolean( )          : 문자열 -> 논리형 

[ 연산자 ]
    1. 산술연산자 : +더하기 -빼기 *곱하기 /나누기 %나머지 
    2. 연결연산자 : +연결
    3. 비교연산자 : >초과 <미만 >=이상 <=이하 ==같다 !=같지않다 , 강력비교( === , !== )
    4. 논리연산자 : &&이면서 ||이거나 !부정
    5. 대입연산자 : =대입 , +=더한후대입 , -= *= /= %=
    6. 증감연산자 : ++변수명 , 변수명++ , --변수명 , 변수명--
    7. 삼항연산자 : 조건 ? 참 : 거짓 , (중첩) 조건1 ? 참1 : 조건2 ? 참2 : 거짓일때

[ 조건문 ] : 특정 조건의 논리(true/false) 결과에 따라서 명령어 처리한다.
    1. if(조건) 참일 때 코드
    2. if(조건){ 참일 때 코드; }
    3. if(조건){ 참일 때 코드; 
        } else{ 거짓일 때 코드; }
    4.  if(조건1){ 참1일 때 코드; 
        } else if(조건2){ 참2일 때 코드;
        } else if(조건3){ 참3일 때 코드; 
        } else{ 거짓일 때 코드; }
    5.  if( 조건A ){
            if ( 조건B ){ } 
            else{ }
        }else{
            if( 조건B ){ } 
            else{ }
        }

<조건문>
        - 회원가입 할 때 아이디가 중복여부 판단,
        아이디목록 = ['qwe', 'asd', 'zxc']
        새로운아이디 = 'asd'

    if( 아이디목록.indexOf( 새로운아이디) != -1){
        현재 사용중인 아이디입니다.
    }


